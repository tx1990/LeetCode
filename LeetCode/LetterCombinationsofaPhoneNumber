public class Solution {
    public IList<string> LetterCombinations(string digits)
    {
        if (string.IsNullOrEmpty(digits))
        {
            return new List<string>();
        }

        var dic = new Dictionary<char, char[]>
        {
            {'0', new[] {' '}},
            {'1', new[] {' '}},
            {'2', new[] {'a', 'b', 'c'}},
            {'3', new[] {'d', 'e', 'f'}},
            {'4', new[] {'g', 'h', 'i'}},
            {'5', new[] {'j', 'k', 'l'}},
            {'6', new[] {'m', 'n', 'o'}},
            {'7', new[] {'p', 'q', 'r', 's'}},
            {'8', new[] {'t', 'u', 'v'}},
            {'9', new[] {'w', 'x', 'y', 'z'}},
        };

        var list = new List<string>();
        var builder = new StringBuilder();
        DfsSearch(digits, 0, dic, builder, list);
        return list;
    }

    public void DfsSearch(string digits, int i, Dictionary<char, char[]> dic, StringBuilder builder, List<string> list)
    {
        if (i < digits.Length)
        {
            var c = dic[digits[i]];
            for (int k = 0; k < c.Length; k++)
            {
                builder.Append(c[k]);
                DfsSearch(digits, i + 1, dic, builder, list);
                builder.Remove(i, 1);
            }
        }
        else
        {
            list.Add(builder.ToString());
        }
    }
}
